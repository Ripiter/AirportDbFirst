//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Airport
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbFirstEntities1 : DbContext
    {
        public DbFirstEntities1()
            : base("name=DbFirstEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Airport> Airports { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Plane> Planes { get; set; }
    
        public virtual ObjectResult<string> GetCompanyNameByID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCompanyNameByID", companyIDParameter);
        }
    
        public virtual ObjectResult<Plane> GetPlanesFromDestination(string destination)
        {
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Plane>("GetPlanesFromDestination", destinationParameter);
        }
    
        public virtual ObjectResult<Plane> GetPlanesFromDestination(string destination, MergeOption mergeOption)
        {
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Plane>("GetPlanesFromDestination", mergeOption, destinationParameter);
        }
    
        public virtual ObjectResult<string> GetPlaneNamesFromDestination(string destination)
        {
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetPlaneNamesFromDestination", destinationParameter);
        }
    }
}
